# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gsJin0Xdaw5YsuPuztOTlTUbu9KadTcB
"""

pip install -q kaggle

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets list

!kaggle datasets download -d 'muhammadbinimran/housing-price-prediction-data'

import zipfile

dataset_zip = zipfile.ZipFile('housing-price-prediction-data.zip', 'r')

dataset_zip.extractall()

dataset_zip.close()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from pandas import Series,DataFrame

#packages for plotting
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
sns.set_style('whitegrid')
# %matplotlib inline

pip install openpyxl

filecsv = "housing_price_dataset.csv"

df = pd.read_csv(filecsv, usecols=['Bedrooms', 'Bathrooms', 'YearBuilt', 'Price'])

df.head()

# @title YearBuilt

from matplotlib import pyplot as plt
df['YearBuilt'].plot(kind='hist', bins=20, title='YearBuilt')
plt.gca().spines[['top', 'right',]].set_visible(False)

df.shape

df.info()

df.describe()

#merubah tipe data dari bathrooms yang semula float menjadi int
df['Bathrooms'] = df['Bathrooms'].astype('int')

#mengganti nilai 1 menjadi 5
df['Bedrooms'] = df['Bedrooms'].replace(1.1, 5)

df.describe()

"""## Handling Missing Value"""

df.isnull().sum()

df.head()

# @title Bedrooms vs Bathrooms

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='Bedrooms', y='Bathrooms', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Price

from matplotlib import pyplot as plt
df['Price'].plot(kind='hist', bins=20, title='Price')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Bedrooms

from matplotlib import pyplot as plt
df['Bedrooms'].plot(kind='hist', bins=20, title='Bedrooms')
plt.gca().spines[['top', 'right',]].set_visible(False)

#engetahui nilai korelasi dari independent variable dan dependent variable
df.corr().style.background_gradient().set_precision(3)

df.head()

#Step 1, buat variable X dan Y
x = df.drop(columns='Price')
y = df['Price']

#Step 2 Buat Split Data X dan Y
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)

#Step 3 Cek Shape dari Data Training dan Testing
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

#Step 4 Buat Objek Linear Regresi
lin_reg = LinearRegression()

#Step 5 train the model menggunakan training data yang sudah di split
lin_reg.fit(x_train, y_train)

#Step 6 Cari tau nilai Slope / Koefisien (m) dan Intercept (b)
print(lin_reg.coef_)
print(lin_reg.intercept_)

#Coba Buat ke dalam agar DataFrame lebih rapi
coef_dict = {
    'features':x.columns,
    'coef_value':lin_reg.coef_
}
coef = pd.DataFrame(coef_dict, columns=['features', 'coef_value'])
coef

y_pred = lin_reg.predict(x_test)

#Step 7 Cari Tahu Accuracy score dari model kita menggunakan testing data yang sudah di split
lin_reg.score(x_test, y_test)

"""*   Disini hasil accuracy score model yang di dapatkan adalah 0,62%

## **Prediction**
Jika seseorang menginginkan rumah dengan permintaan sebagai berikut :
*   Bedrooms = 2
*   Bathrooms = 2
*   YearBuilt = 2001
"""

#prediksi harga rumah sesuai kriteria diatas adalah
lin_reg.predict([[2,2,2001]])

"""Maka Perkiraan Harga Rumah Sesuai Kriteria adalah 217.126 US$"""